{"version":3,"sources":["pages/NotFoundPage.js","pages/Home.js","logo.svg","routes.js","components/LayoutComponents/Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["NotFoundPage","React","Component","Home","module","exports","loadable","loader","Loadable","delay","loading","loadableRoutes","component","Routes","timeoutId","this","setTimeout","Object","keys","forEach","path","preload","clearTimeout","exact","HomePage","map","props","key","render","Layout","className","to","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAEMA,E,iLAEF,OAAO,6C,GAFgBC,IAAMC,WAMlBF,a,8FCNTG,E,iLAEF,OAAO,6BACL,2D,GAHaF,IAAMC,WAQVC,a,4ECVfC,EAAOC,QAAU,IAA0B,kC,4LCMrCC,EAAW,SAAAC,GAAM,OACrBC,IAAS,CACPD,SACAE,OAAO,EACPC,QAAS,kBAAM,SAGbC,EAAiB,CACrB,QAAS,CACPC,UAAWN,GAAS,kBAAM,4CAG5B,OAAQ,CACNM,UAAWN,GAAS,kBAAM,4CAG5B,YAAa,CACXM,UAAWN,GAAS,kBAAM,uDAG5B,oBAAqB,CACnBM,UAAWN,GAAS,kBAAM,uDAE5B,cAAe,CACbM,UAAWN,GAAS,kBAAM,wDAuCfO,E,2MAlCbC,UAAY,K,mFAGVC,KAAKD,UAAYE,YACf,kBACEC,OAAOC,KAAKP,GAAgBQ,SAAQ,SAAAC,GAAI,OACtCT,EAAeS,GAAMR,UAAUS,eAEnC,O,6CAKEN,KAAKD,WACPQ,aAAaP,KAAKD,a,+BAKpB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,OAAK,EAACH,KAAK,IAAIR,UAAWY,YAChCP,OAAOC,KAAKP,GAAgBc,KAAI,SAAAL,GAAS,IAAD,EACXT,EAAeS,GAAnCG,EAD+B,EAC/BA,MAAUG,EADqB,yBAGvC,OADAA,EAAMH,WAAkB,IAAVA,GAAoBA,IAAS,EACpC,kBAAC,IAAD,eAAOI,IAAKP,EAAMA,KAAMA,GAAUM,OAE3C,kBAAC,IAAD,CAAOE,OAAQ,kBAAM,kBAAC5B,EAAA,QAAD,c,GA5BRC,IAAMC,W,QCHZ2B,E,iLAzBX,OACE,6BACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,cACb,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,SAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,aAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,iBAIN,yBAAKD,UAAU,WACb,kBAAC,EAAD,a,GAnBS7B,IAAMC,W,YCMZ8B,MAJf,WACE,OAAO,kBAAC,EAAD,OCKWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASV,OAAO,kBAAC,EAAD,MAASW,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.20259275.chunk.js","sourcesContent":["import React from \"react\";\n\nclass NotFoundPage extends React.Component {\n  render() {\n    return <div>404 Page</div>;\n  }\n}\n\nexport default NotFoundPage;\n","import React from \"react\";\n\nclass Home extends React.Component {\n  render() {\n    return <div>\n      <h3>Impact Guru Assignment</h3>\n    </div>;\n  }\n}\n\nexport default Home;\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Loadable from \"react-loadable\";\nimport NotFoundPage from \"./pages/NotFoundPage\";\nimport HomePage from \"./pages/Home\";\n\nconst loadable = loader =>\n  Loadable({\n    loader,\n    delay: false,\n    loading: () => null\n  });\n\nconst loadableRoutes = {\n  \"/home\": {\n    component: loadable(() => import(\"./pages/Home\"))\n  },\n\n  \"/404\": {\n    component: loadable(() => import(\"./pages/NotFoundPage\"))\n  },\n\n  \"/missions\": {\n    component: loadable(() => import(\"./pages/missions\"))\n  },\n\n  \"/payload/:payload\": {\n    component: loadable(() => import(\"./pages/payload\"))\n  },\n  \"/launchpads\": {\n    component: loadable(() => import(\"./pages/launchpads\"))\n  }\n};\n\nclass Routes extends React.Component {\n  timeoutId = null;\n\n  componentDidMount() {\n    this.timeoutId = setTimeout(\n      () =>\n        Object.keys(loadableRoutes).forEach(path =>\n          loadableRoutes[path].component.preload()\n        ),\n      5000 // load after 5 sec\n    );\n  }\n\n  componentWillUnmount() {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n    }\n  }\n\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        {Object.keys(loadableRoutes).map(path => {\n          const { exact, ...props } = loadableRoutes[path];\n          props.exact = exact === void 0 || exact || false; // set true as default\n          return <Route key={path} path={path} {...props} />;\n        })}\n        <Route render={() => <NotFoundPage />} />\n      </Switch>\n    );\n  }\n}\n\nexport { loadableRoutes };\nexport default Routes;\n","import React from \"react\";\nimport Routes from \"../../../routes\";\nimport { Link, BrowserRouter as Router } from \"react-router-dom\";\n\nclass Layout extends React.Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <nav className=\"navigation\">\n            <ul>\n              <li>\n                <Link to=\"/home\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/missions\">Missions</Link>\n              </li>\n              <li>\n                <Link to=\"/launchpads\">Launchpads</Link>\n              </li>\n            </ul>\n          </nav>\n          <div className=\"content\">\n            <Routes />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default Layout;\n","import React from \"react\";\nimport Layout from \"./components/LayoutComponents/Layout\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Layout />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}